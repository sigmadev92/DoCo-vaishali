NODE.JS setup in the system:
1. Originally, after installing node.js from the browser - you have to globally initilize to access the node and npm in your system.
    Command is as follows:
            npm install create-react-app --global
2. To check the version of node and npm 
    Command is as follows: 
            node -v
            npm -v
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Bank Server Setup 

1. Folder structure -> 
    # config - database connections and configuration [setup] -->
    # app.js file - The app.js file is the central hub where the entire application is initialized. It sets up Express, connects the routes, loads middleware, and may also connect to the database.
    # .env file - stores all the enviornment variables - port, api key, mongo url etc

    # Client Request: A client sends an HTTP request (e.g., GET /users).
    # routes - The request hits the appropriate route defined in the routes/ directory.
    # middleware - If any middleware is associated (e.g., authentication or logging), it processes the request.
    # controllers - The controller handles the business logic. It may interact with models to fetch or modify data.
    # models - The models interact with the database to retrieve or persist data.
    # library - helpers & utilities [eg: nodeMailer] - If any utility functions are needed (e.g., sending emails, logging), they are called from the library/.
    # Response: The controller returns the final response (e.g., JSON) to the client, ending the request-response cycle.

2. Data Flow of Backend ->
    routes -->  middleware --> controllers --> models --> library --> app.js

3. packages installed -> 
    # npm - node package manager is used to install external packages

    # npm init -y [configuration file is installed - package.json] ->
        add in package.json -  "start":"npm start"
    # npm i express 
    # npm i mongoose 
    # npm i nodemon 
    #

4. Learning ->
    # require function - to import files and packages imported. or ojects from file whose functions needs to be used
    # module.export - export function of one files to another - to return multiple thing we use objects "{}" from javascript 
    # file handling - operations on file - build in attribute - fs (file system) 
        operations - writeFileSync - it is a sync call to which create a file.
        writeFile - Async - wirte the text in file
        readFileSync - can be store in a const and give output
        readFile - it expects a callback
        apendFileSync - add text in existing file
        and many more...
    # Architecture of NodeJs - flow - 
        cliend request a Server
        Event Queue are in set request on line - request went to event loop and check event queue for requests - it pick and remove 
        event loop has 2 operations - blocking operations(sync taks) and non-blocking operations(async task)
            async task - resolve and response sent to users
            sync task - 
                thread pool - [worker - assign a worker and make him work] 
                return result 
        hence, user get the response

        note: thread are limited - by default = 4 ; max - 8core cpu = 8 threads
    # Http webserver -  
        inbuild module - http 
    # URL - unifrom resource locator -> 
        example - Queue parameter => url/search?query=apple+red 
        package - npm i url -> provide url details
    # Http requests method- 
        GET -> to retrive data from the database
        POST -> to add the data in the database
        PUT -> to update the data in the database (to upload files) 
        PATCH -> to update the partial data in the database 
        DELETE -> to remove the data from the database 
    #  Express -> package npm i Express
        code reduce and simple
        routing -> app.method("path", (req,res)=>{})
    # versioning works in nodeJS -> ^4.18.2 (eg)
        2 => minor fixes 
        18 => recommended bug fix (security fix) or adding new feature
        4 => major release / breaking change 
        ^ (carrot symbol) => symbol not to update 4 -> lock number / lock major release
        ~ (appropriate symbol) => update only minor changes
    # REST API / RESTFULL API -> server to client communication is based on request and response
        rules - 
            Server Client Architecture - response can be of many kinds like html, json, image etc etc 
            Always respect all http methods (get, post, put, patch, delete) 
            some rendering -> res.send(), res.json(), res.render() and so on 
    # Build rest api using node & express
        npm init 
        npm i express 
        index.js file -> require express, app, port, define routes ,listen
        mockaroo.com -> generate fake data to use
        index.js -> require json file  
        for understanding -> api/user return json data where are /user return html dis
        Dynamic Path parameter - GET /api/user/:id --> : denotes that the id is variable (dynamic) - req.params.id 
        grouping for same api -> use . operator 
    # Postman for rest api 
        testing - http methods  
    # express middleware
        has 3 parameter req, res and next -> it is consider as a middelman 
        3rd party middlewares  - urlencoded    
    # http headers 
        Headers - are additional information 
        headers can be response headers and request headers
        from, to (contains id address), size of file/information, content-type = json/html/ etc, date and many more..
        setHeaders() // to add headers - in terms of key, value pairs 
        Custom headers - additional header which is used 
    # http status codes
        type of response 
            information response - [100-199]
            successful response - [200 - 299]
            redirection response - [300 - 399]
            client error response - [400 - 499]
            server error response - [500 - 599]
        To explore more - mdn website - http response status code 
        200 - ok
        201 - created by post req 
        204 - no content 
        400 - bad request
        401 - unauthorise -> not login 
        402 - payment required 
        404 - not found 
        500 - internal server error 
        package - npm i nodemon -> it start server automatically 
    # mongodb
        NoSQL - database - has collections and documents 
        Strong support for aggregstion pipes
        JSON format 

        mongosh -> mongo shell -> 
        commands -> 
        show dbs
        use dbname
        show collections 
        db.cols.find({})
        db.cols.insert({  })
    # connecting node with mongodb (schema --> model --> access)
        package - mongoose 
        schema - define the structure
        using models we perform CURD (create, update, read and delete) operations
        build in function - mongoose.Schema 
        model of schema - mongoose.model("modelname", schemaName)
        queries -
           post req - modelname.create({});
           get req - modelname.find({});
           get req - modelname.findById(req.params.id);
           patch req - modelname.findByIdAndUpdate(req.params.id, {lastName:"changed"});
           delete req - modelname.findByIdAndDelete(req.params.id);
    # Model View Controllers - [MVC]
        components - models, views, controllers
        MVC Flow - "controller manipulate models and models update views"
        folder structure for code maintainability -
            index.js -> overview - deciding flow 
                        mongodb connect ulr and link 
                        import middleware
                        app.use(middlewarefunctionName())
                        import userRoute
                        app.use("/user", userRoute)
            connection / config - code to connect to mongodb and module.export = {mongo}
            model -> schema and its model 
            route -> import controller
                    const userRoute = express.Router();
                    // Router.get("api", (req,res) =>{});   <- modify
                    userRoute.get("/", handleGetAllUser);
                    module.exports = userRoute;
            middlewares -> 
                    contains - req,res,next in functions
                    module.exports = {middlewarefunctionName} 
            controllers -> only have functions attach with route 
                    async function handleGetAllUser(req,res)
                    module.export={handleGetAllUser}
            views -> contains ui 
    # custom url shortener using node and mongo
        work flow - 
            1. installed packages
            2. set up the index.js file
            3. updating package.json 
            4. setting up folder structure -> MVC structure -> created folders - models, view,controllers,routes 
            5. creating schema in models 
            6. creating route 
            7. creating controllers
            8. instll required package - short-id 
            9. test api using postMan 
    # server side rendering with ejs & node
        ejs - Embedded java script engines 
        pug - engines
        handlebars - engines 
        
        package - npm i ejs
        set up view engine in index
    # building node authentication from scratch
	Authentication Patterns - 
		Statefull - which maintains state or data on the server data
 		Stateless - which has no state 
        transfer uid -> cookies, response, Headers
    # JWT authentication from scratch
        
    # cookies in node 
    # Authorization 
    # create discord bot in node 
    # uploading files with node and multer 
    # Project - setting up project - mini project
    # Project - setting up authentication - blogging application with mongo
    # Project - Complete Blog App - node, mongo and EJS 
    # Project - Deploy Node application on AWS 
    # WebSocket in node - socket.io 
    # Node streams 
    # Scale node application using the cluster module
    # nginx
    # install and setup nginx
    # server static content with nginx
    # Full node deployment  

5.  Banking System 
    # MVC Structure -> 
    # authentication, authorization with email and phone 
    # mongo connect
    # Schema -> user, transaction 
    # Create account -> 
        multer for photo
        personal details submit
        password in hash algo
    # account number generate -> randomly generate (11 digits)
    # set pin -> 4 digit
    # options -> user/ -> route
        deposit money + pin
        withdraw money + pin 
        transfer + pin 
        view balance + pin 
        view account details + pin 
        mini statements -> details of transition history + pin
    # login -> account number, mobile number, email -> pin 

6. techonologies -> express, node js, mongodb
7. pacakges installed -> npm i mongoose express nodemon dotenv multer cors
8. Logic ->
    Schema -> user
    fields -> First name, last name, Phone number, email,state, city, pinCode, Address, Password, Account number, DigitalPin, balance, Profile photo
    Routes -> user
    Register route , Login route, Pin setup - 4 digits , deposit money + pin, withdraw money + pin, transfer + pin , view balance + pin , view user details + pin , mini statements -> details of transition history + pin


// deposit money + pin

// withdraw money + pin

// transfer + pin

// view balance + pin

// view user details + pin

// mini statements -> details of transition history + pin
